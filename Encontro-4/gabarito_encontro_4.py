# GABARITO - ENCONTRO 4: Estruturas condicionais (if / elif / else)
# Monitoria de Python - Engenharia da Computa√ß√£o

"""
GABARITO COMPLETO
Solu√ß√µes comentadas focando em estruturas condicionais
"""

print("=== GABARITO - ENCONTRO 4 ===")
print()

# ======================================
# EXERC√çCIO 1 - VERIFICADOR DE MAIORIDADE
# ======================================
print("1. VERIFICADOR DE MAIORIDADE")
print("=" * 35)

# Solu√ß√£o:
idade = int(input("Digite sua idade: "))

if idade >= 18:
    print("üéâ Voc√™ √© maior de idade!")
    print("Direitos: votar, dirigir, trabalhar sem restri√ß√µes")
else:
    anos_faltam = 18 - idade
    print(f"üìÖ Menor de idade - aguarde {anos_faltam} ano(s)")
    print("Aproveite esta fase da vida!")

# Informa√ß√µes adicionais baseadas na idade
if idade >= 65:
    print("üèÜ Direito √† meia-entrada em eventos")
elif idade >= 16:
    print("üìù Pode votar (facultativo at√© 18)")

print("\nüí° EXPLICA√á√ÉO:")
print("- if/else para classifica√ß√£o bin√°ria (maior/menor)")
print("- C√°lculo dentro da estrutura condicional")
print("- elif adicional para casos espec√≠ficos")
print("- Mensagens personalizadas para cada faixa")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 2 - CALCULADORA DE IMC COM CLASSIFICA√á√ÉO  
# ======================================
print("2. CALCULADORA DE IMC COM CLASSIFICA√á√ÉO")
print("=" * 45)

# Solu√ß√£o:
print("=== CALCULADORA DE IMC ===")
peso = float(input("Peso (kg): "))
altura = float(input("Altura (m): "))

# Valida√ß√£o de entrada
if peso <= 0 or altura <= 0:
    print("‚ùå ERRO: Peso e altura devem ser positivos!")
else:
    # C√°lculo do IMC
    imc = peso / (altura * altura)
    print(f"\nIMC calculado: {imc:.2f}")
    
    # Classifica√ß√£o usando if/elif/else
    if imc < 18.5:
        categoria = "Abaixo do peso"
        recomendacao = "Considere ganhar peso de forma saud√°vel"
        emoji = "‚¨áÔ∏è"
    elif imc < 25.0:  # 18.5 <= imc < 25.0
        categoria = "Peso normal"
        recomendacao = "Mantenha seus h√°bitos saud√°veis!"
        emoji = "‚úÖ"
    elif imc < 30.0:  # 25.0 <= imc < 30.0
        categoria = "Sobrepeso"
        recomendacao = "Considere exerc√≠cios e dieta balanceada"
        emoji = "‚ö†Ô∏è"
    else:  # imc >= 30.0
        categoria = "Obesidade"
        recomendacao = "Procure orienta√ß√£o m√©dica"
        emoji = "üö®"
    
    print(f"\n{emoji} Categoria: {categoria}")
    print(f"üí° Recomenda√ß√£o: {recomendacao}")
    
    # An√°lise adicional
    if imc < 16:
        print("‚ö†Ô∏è IMC muito baixo - consulte um m√©dico")
    elif imc > 35:
        print("üö® IMC muito alto - aten√ß√£o m√©dica urgente")

print("\nüí° EXPLICA√á√ÉO:")
print("- Valida√ß√£o inicial com if para evitar erros")
print("- elif em sequ√™ncia para faixas de IMC")
print("- Cada elif testa o pr√≥ximo intervalo automaticamente")
print("- else captura todos os casos restantes (>=30)")
print("- Condicionais adicionais para casos extremos")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 3 - SISTEMA DE LOGIN
# ======================================
print("3. SISTEMA DE LOGIN")
print("=" * 25)

# Solu√ß√£o:
print("=== SISTEMA DE LOGIN ===")

# Credenciais corretas (hardcoded para o exerc√≠cio)
USUARIO_CORRETO = "admin"
SENHA_CORRETA = "12345"

usuario = input("Usu√°rio: ")
senha = input("Senha: ")

# Sistema de valida√ß√£o com condi√ß√µes aninhadas
if usuario == USUARIO_CORRETO:
    if senha == SENHA_CORRETA:
        print("üîì LOGIN REALIZADO COM SUCESSO!")
        print(f"Bem-vindo, {usuario}!")
        print("Acesso ao sistema liberado.")
    else:
        print("üîí ACESSO NEGADO: Senha incorreta")
        print("üí° Dica: Verifique se o Caps Lock est√° desligado")
else:
    print("üîí ACESSO NEGADO: Usu√°rio n√£o encontrado")
    if senha == SENHA_CORRETA:
        print("üí° A senha est√° correta, mas o usu√°rio est√° errado")
    else:
        print("üí° Usu√°rio E senha est√£o incorretos")

# Vers√£o alternativa com condi√ß√µes compostas
print("\n--- VERS√ÉO ALTERNATIVA ---")
if usuario == USUARIO_CORRETO and senha == SENHA_CORRETA:
    print("‚úÖ Acesso liberado com operador AND")
else:
    print("‚ùå Falha na autentica√ß√£o")
    # Diagn√≥stico espec√≠fico
    if usuario != USUARIO_CORRETO and senha != SENHA_CORRETA:
        print("- Usu√°rio E senha incorretos")
    elif usuario != USUARIO_CORRETO:
        print("- Apenas usu√°rio incorreto")
    else:
        print("- Apenas senha incorreta")

print("\nüí° EXPLICA√á√ÉO:")
print("- if aninhado: primeiro valida usu√°rio, depois senha")
print("- Condi√ß√µes compostas: and para validar ambos")
print("- Mensagens espec√≠ficas para cada tipo de erro")
print("- Diagn√≥stico detalhado ajuda o usu√°rio")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 4 - CLASSIFICADOR DE TRI√ÇNGULOS
# ======================================
print("4. CLASSIFICADOR DE TRI√ÇNGULOS")
print("=" * 35)

# Solu√ß√£o:
print("=== CLASSIFICADOR DE TRI√ÇNGULOS ===")
lado1 = float(input("Primeiro lado: "))
lado2 = float(input("Segundo lado: "))
lado3 = float(input("Terceiro lado: "))

# Valida√ß√£o: lados devem ser positivos
if lado1 <= 0 or lado2 <= 0 or lado3 <= 0:
    print("‚ùå ERRO: Todos os lados devem ser positivos!")
else:
    # Valida√ß√£o: desigualdade triangular
    # Para formar tri√¢ngulo: soma de dois lados > terceiro lado
    if (lado1 + lado2 > lado3 and 
        lado1 + lado3 > lado2 and 
        lado2 + lado3 > lado1):
        
        print("‚úÖ Os valores formam um tri√¢ngulo v√°lido!")
        print(f"Lados: {lado1}, {lado2}, {lado3}")
        
        # Classifica√ß√£o do tri√¢ngulo
        if lado1 == lado2 == lado3:
            tipo = "EQUIL√ÅTERO"
            descricao = "Todos os lados s√£o iguais"
        elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:
            tipo = "IS√ìSCELES"
            descricao = "Dois lados s√£o iguais"
        else:
            tipo = "ESCALENO"
            descricao = "Todos os lados s√£o diferentes"
        
        print(f"\nüìê Tipo: {tipo}")
        print(f"üìù Descri√ß√£o: {descricao}")
        
        # An√°lise adicional: tipo de √¢ngulo (usando Pit√°goras)
        lados = sorted([lado1, lado2, lado3])
        a, b, c = lados[0], lados[1], lados[2]  # c √© o maior lado
        
        if abs(c*c - (a*a + b*b)) < 0.001:  # Pyt√°goras (com toler√¢ncia)
            print("üìê √Çngulo: Tri√¢ngulo ret√¢ngulo")
        elif c*c > a*a + b*b:
            print("üìê √Çngulo: Tri√¢ngulo obtus√¢ngulo")
        else:
            print("üìê √Çngulo: Tri√¢ngulo acut√¢ngulo")
            
    else:
        print("‚ùå Os valores N√ÉO formam um tri√¢ngulo!")
        print("üí° Lembre-se: soma de dois lados > terceiro lado")
        
        # Diagn√≥stico espec√≠fico
        if lado1 + lado2 <= lado3:
            print(f"- Problema: {lado1} + {lado2} = {lado1 + lado2} ‚â§ {lado3}")
        elif lado1 + lado3 <= lado2:
            print(f"- Problema: {lado1} + {lado3} = {lado1 + lado3} ‚â§ {lado2}")
        else:
            print(f"- Problema: {lado2} + {lado3} = {lado2 + lado3} ‚â§ {lado1}")

print("\nüí° EXPLICA√á√ÉO:")
print("- Valida√ß√£o em camadas: positivos ‚Üí desigualdade triangular")
print("- Condi√ß√µes compostas com and para m√∫ltiplas verifica√ß√µes")
print("- elif para classifica√ß√£o mutuamente exclusiva")
print("- sorted() para organizar lados e facilitar c√°lculos")
print("- abs() para lidar com imprecis√£o de float")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 5 - SISTEMA DE DESCONTO PROGRESSIVO
# ======================================
print("5. SISTEMA DE DESCONTO PROGRESSIVO")
print("=" * 40)

# Solu√ß√£o:
print("=== E-COMMERCE - SISTEMA DE DESCONTO ===")
valor_compra = float(input("Valor da compra: R$ "))
eh_vip = input("Cliente VIP? (sim/n√£o): ").lower() == "sim"

if valor_compra <= 0:
    print("‚ùå ERRO: Valor da compra deve ser positivo!")
else:
    print(f"\nValor original: R$ {valor_compra:.2f}")
    print(f"Cliente VIP: {'Sim' if eh_vip else 'N√£o'}")
    
    # Sistema de desconto com condi√ß√µes aninhadas
    desconto_percentual = 0
    
    if eh_vip:
        # Descontos VIP (maiores)
        if valor_compra >= 1000:
            desconto_percentual = 20
        elif valor_compra >= 500:
            desconto_percentual = 15
        elif valor_compra >= 200:
            desconto_percentual = 10
        else:
            desconto_percentual = 5  # VIP sempre tem desconto
    else:
        # Descontos cliente comum
        if valor_compra >= 1000:
            desconto_percentual = 15
        elif valor_compra >= 500:
            desconto_percentual = 10
        elif valor_compra >= 200:
            desconto_percentual = 5
        # else: sem desconto (0%)
    
    # C√°lculos finais
    desconto_valor = valor_compra * desconto_percentual / 100
    valor_final = valor_compra - desconto_valor
    economia = desconto_valor
    
    print(f"\n=== RESUMO DO PEDIDO ===")
    print(f"Desconto aplicado: {desconto_percentual}%")
    print(f"Valor do desconto: R$ {desconto_valor:.2f}")
    print(f"Valor final: R$ {valor_final:.2f}")
    print(f"Economia: R$ {economia:.2f}")
    
    # Incentivos adicionais
    if not eh_vip and valor_compra >= 100:
        print("\nüíé PROMO√á√ÉO: Torne-se VIP e ganhe desconto extra!")
    
    if desconto_percentual == 0:
        proximo_desconto = 200
        falta = proximo_desconto - valor_compra
        print(f"\nüí° Adicione R$ {falta:.2f} e ganhe 5% de desconto!")
    
    # An√°lise do benef√≠cio VIP
    if eh_vip:
        if valor_compra >= 200:
            desconto_comum = 5 if valor_compra >= 200 else 0
            if valor_compra >= 1000:
                desconto_comum = 15
            elif valor_compra >= 500:
                desconto_comum = 10
            
            beneficio_vip = desconto_percentual - desconto_comum
            if beneficio_vip > 0:
                print(f"\n‚≠ê Benef√≠cio VIP: +{beneficio_vip}% de desconto extra!")

print("\nüí° EXPLICA√á√ÉO:")
print("- Condi√ß√µes aninhadas: primeiro status VIP, depois valor")
print("- elif em sequ√™ncia para faixas de desconto")
print("- C√°lculos realizados ap√≥s determinar desconto")
print("- Incentivos baseados em condi√ß√µes espec√≠ficas")
print("- Compara√ß√£o entre benef√≠cios VIP e comum")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 6 - APROVA√á√ÉO DE EMPR√âSTIMO
# ======================================
print("6. APROVA√á√ÉO DE EMPR√âSTIMO")
print("=" * 30)

# Solu√ß√£o:
print("=== SISTEMA BANC√ÅRIO - AN√ÅLISE DE CR√âDITO ===")
renda = float(input("Renda mensal: R$ "))
idade = int(input("Idade: "))
score = int(input("Score de cr√©dito (0-1000): "))
tempo_trabalho = int(input("Tempo no trabalho atual (meses): "))

# Valida√ß√£o de entrada
dados_validos = True

if renda <= 0:
    print("‚ùå Renda deve ser positiva")
    dados_validos = False
    
if idade < 18 or idade > 80:
    print("‚ùå Idade deve estar entre 18 e 80 anos")
    dados_validos = False
    
if score < 0 or score > 1000:
    print("‚ùå Score deve estar entre 0 e 1000")
    dados_validos = False
    
if tempo_trabalho < 0:
    print("‚ùå Tempo de trabalho n√£o pode ser negativo")
    dados_validos = False

if dados_validos:
    print(f"\n=== AN√ÅLISE DE CR√âDITO ===")
    print(f"Renda: R$ {renda:.2f}")
    print(f"Idade: {idade} anos")
    print(f"Score: {score}")
    print(f"Tempo trabalho: {tempo_trabalho} meses")
    
    # Sistema de aprova√ß√£o com m√∫ltiplos crit√©rios
    aprovado = False
    valor_maximo = 0
    taxa_juros = 0
    motivos_recusa = []
    
    # Crit√©rios b√°sicos
    renda_minima = renda >= 1500
    idade_ok = 21 <= idade <= 70
    score_minimo = score >= 300
    tempo_minimo = tempo_trabalho >= 6
    
    print(f"\n=== CRIT√âRIOS B√ÅSICOS ===")
    print(f"Renda m√≠nima (R$1500): {'‚úÖ' if renda_minima else '‚ùå'}")
    print(f"Idade ideal (21-70): {'‚úÖ' if idade_ok else '‚ùå'}")
    print(f"Score m√≠nimo (300+): {'‚úÖ' if score_minimo else '‚ùå'}")
    print(f"Tempo trabalho (6+ meses): {'‚úÖ' if tempo_minimo else '‚ùå'}")
    
    # L√≥gica de aprova√ß√£o
    if renda_minima and idade_ok and score_minimo and tempo_minimo:
        aprovado = True
        
        # Determinando valor e taxa baseados no perfil
        if score >= 800 and renda >= 5000:
            # Perfil premium
            valor_maximo = renda * 15
            taxa_juros = 1.5
            categoria = "PREMIUM"
        elif score >= 600 and renda >= 3000:
            # Perfil bom
            valor_maximo = renda * 10
            taxa_juros = 2.5
            categoria = "BOM"
        elif score >= 400:
            # Perfil regular
            valor_maximo = renda * 5
            taxa_juros = 4.0
            categoria = "REGULAR"
        else:
            # Perfil b√°sico
            valor_maximo = renda * 3
            taxa_juros = 6.0
            categoria = "B√ÅSICO"
        
        # Ajustes por idade
        if idade > 60:
            valor_maximo *= 0.8  # Redu√ß√£o de 20%
            print("‚ö†Ô∏è Ajuste por idade: valor reduzido em 20%")
        
        # Ajustes por tempo de trabalho
        if tempo_trabalho >= 24:
            taxa_juros -= 0.5  # Bonus estabilidade
            print("‚úÖ B√¥nus estabilidade: taxa reduzida em 0.5%")
    
    else:
        # Coletando motivos de recusa
        if not renda_minima:
            motivos_recusa.append("Renda insuficiente (m√≠nimo R$ 1.500)")
        if not idade_ok:
            motivos_recusa.append("Idade fora da faixa aceita (21-70 anos)")
        if not score_minimo:
            motivos_recusa.append("Score muito baixo (m√≠nimo 300)")
        if not tempo_minimo:
            motivos_recusa.append("Pouco tempo no emprego atual (m√≠nimo 6 meses)")
    
    # Resultado final
    print(f"\n=== RESULTADO FINAL ===")
    if aprovado:
        print("üéâ EMPR√âSTIMO APROVADO!")
        print(f"üìä Categoria: {categoria}")
        print(f"üí∞ Valor m√°ximo: R$ {valor_maximo:.2f}")
        print(f"üìà Taxa de juros: {taxa_juros:.1f}% ao m√™s")
        
        # Simula√ß√£o de parcelas
        parcela_12x = (valor_maximo * (1 + taxa_juros/100 * 12)) / 12
        parcela_24x = (valor_maximo * (1 + taxa_juros/100 * 24)) / 24
        
        print(f"\nüí≥ Simula√ß√£o (valor m√°ximo):")
        print(f"12x: R$ {parcela_12x:.2f}")
        print(f"24x: R$ {parcela_24x:.2f}")
        
    else:
        print("‚ùå EMPR√âSTIMO NEGADO")
        print("üìã Motivos da recusa:")
        for i, motivo in enumerate(motivos_recusa, 1):
            print(f"   {i}. {motivo}")
        
        print(f"\nüí° RECOMENDA√á√ïES:")
        if score < 600:
            print("- Melhore seu score pagando contas em dia")
        if renda < 3000:
            print("- Comprove renda adicional se poss√≠vel")
        if tempo_trabalho < 12:
            print("- Aguarde mais tempo no emprego atual")

else:
    print("\n‚ùå Corrija os dados e tente novamente!")

print("\nüí° EXPLICA√á√ÉO:")
print("- Valida√ß√£o completa de entrada")
print("- Crit√©rios m√∫ltiplos com condi√ß√µes compostas")
print("- if/elif para categoriza√ß√£o de perfil")
print("- C√°lculos condicionais baseados no perfil")
print("- Coleta de motivos de recusa para feedback")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 7 - JOGO PEDRA, PAPEL, TESOURA
# ======================================
print("7. JOGO PEDRA, PAPEL, TESOURA")
print("=" * 35)

import random

# Solu√ß√£o:
print("=== PEDRA, PAPEL, TESOURA ===")
print("Op√ß√µes: pedra, papel, tesoura")

jogada_jogador = input("Sua jogada: ").lower().strip()

# Valida√ß√£o da entrada
opcoes_validas = ["pedra", "papel", "tesoura"]

if jogada_jogador not in opcoes_validas:
    print("‚ùå JOGADA INV√ÅLIDA!")
    print(f"Use apenas: {', '.join(opcoes_validas)}")
else:
    # Computador escolhe aleatoriamente
    jogada_computador = random.choice(opcoes_validas)
    
    print(f"\nVoc√™: {jogada_jogador}")
    print(f"Computador: {jogada_computador}")
    print()
    
    # Determinando o vencedor
    if jogada_jogador == jogada_computador:
        resultado = "EMPATE"
        print("ü§ù EMPATE! Voc√™s escolheram a mesma op√ß√£o!")
        
    elif (jogada_jogador == "pedra" and jogada_computador == "tesoura") or \
         (jogada_jogador == "papel" and jogada_computador == "pedra") or \
         (jogada_jogador == "tesoura" and jogada_computador == "papel"):
        resultado = "VIT√ìRIA"
        print("üéâ VOC√ä GANHOU!")
        
        # Explica√ß√£o da vit√≥ria
        if jogada_jogador == "pedra":
            print("‚úä Pedra quebra tesoura!")
        elif jogada_jogador == "papel":
            print("üìÑ Papel embrulha pedra!")
        else:  # tesoura
            print("‚úÇÔ∏è Tesoura corta papel!")
            
    else:
        resultado = "DERROTA"
        print("üòû VOC√ä PERDEU!")
        
        # Explica√ß√£o da derrota
        if jogada_computador == "pedra":
            print("‚úä Pedra quebra tesoura!")
        elif jogada_computador == "papel":
            print("üìÑ Papel embrulha pedra!")
        else:  # tesoura
            print("‚úÇÔ∏è Tesoura corta papel!")
    
    # Estat√≠sticas do jogo
    print(f"\nüìä Resultado: {resultado}")
    
    # Vers√£o alternativa mais compacta
    print("\n--- VERS√ÉO COMPACTA ---")
    vitorias = {
        ("pedra", "tesoura"): "Pedra quebra tesoura",
        ("papel", "pedra"): "Papel embrulha pedra", 
        ("tesoura", "papel"): "Tesoura corta papel"
    }
    
    if jogada_jogador == jogada_computador:
        print("Empate!")
    elif (jogada_jogador, jogada_computador) in vitorias:
        print(f"Voc√™ ganhou! {vitorias[(jogada_jogador, jogada_computador)]}")
    else:
        print(f"Voc√™ perdeu! {vitorias[(jogada_computador, jogada_jogador)]}")

print("\nüí° EXPLICA√á√ÉO:")
print("- Valida√ß√£o de entrada com lista de op√ß√µes v√°lidas")
print("- random.choice() para escolha do computador")
print("- Condi√ß√µes compostas com or para m√∫ltiplas vit√≥rias")
print("- if/elif/else para 3 resultados poss√≠veis")
print("- Dicion√°rio como alternativa para regras do jogo")
print()

print("-" * 60)

# ======================================
# EXERC√çCIO 8 - ANALISADOR DE SENHA COMPLEXO
# ======================================
print("8. ANALISADOR DE SENHA COMPLEXO")
print("=" * 40)

# Solu√ß√£o:
print("=== ANALISADOR DE FOR√áA DE SENHA ===")
senha = input("Digite sua senha: ")

# An√°lise dos crit√©rios
comprimento_ok = len(senha) >= 8
tem_minuscula = any(c.islower() for c in senha)
tem_maiuscula = any(c.isupper() for c in senha)
tem_numero = any(c.isdigit() for c in senha)
tem_simbolo = any(not c.isalnum() for c in senha)

print(f"\n=== AN√ÅLISE DA SENHA ===")
print(f"Comprimento (‚â•8): {'‚úÖ' if comprimento_ok else '‚ùå'} ({len(senha)} caracteres)")
print(f"Min√∫scula: {'‚úÖ' if tem_minuscula else '‚ùå'}")
print(f"Mai√∫scula: {'‚úÖ' if tem_maiuscula else '‚ùå'}")
print(f"N√∫mero: {'‚úÖ' if tem_numero else '‚ùå'}")
print(f"S√≠mbolo: {'‚úÖ' if tem_simbolo else '‚ùå'}")

# Contando crit√©rios atendidos
criterios_atendidos = sum([
    comprimento_ok, tem_minuscula, tem_maiuscula, 
    tem_numero, tem_simbolo
])

print(f"\nCrit√©rios atendidos: {criterios_atendidos}/5")

# Classifica√ß√£o da for√ßa
if criterios_atendidos == 5:
    forca = "MUITO FORTE"
    cor = "üü¢"
    feedback = "Excelente! Sua senha √© muito segura."
elif criterios_atendidos >= 4:
    forca = "FORTE"
    cor = "üîµ"
    feedback = "Boa senha! Considere adicionar os crit√©rios faltantes."
elif criterios_atendidos >= 3:
    forca = "M√âDIA"
    cor = "üü°"
    feedback = "Senha razo√°vel, mas pode melhorar."
elif criterios_atendidos >= 2:
    forca = "FRACA"
    cor = "üü†"
    feedback = "Senha vulner√°vel. Adicione mais crit√©rios."
else:
    forca = "MUITO FRACA"
    cor = "üî¥"
    feedback = "Senha muito insegura! Refa√ßa completamente."

print(f"\n{cor} FOR√áA DA SENHA: {forca}")
print(f"üí¨ {feedback}")

# Sugest√µes espec√≠ficas usando condi√ß√µes aninhadas
print(f"\n=== SUGEST√ïES DE MELHORIA ===")
sugestoes = []

if not comprimento_ok:
    sugestoes.append("‚Ä¢ Use pelo menos 8 caracteres")
if not tem_minuscula:
    sugestoes.append("‚Ä¢ Adicione letras min√∫sculas (a-z)")
if not tem_maiuscula:
    sugestoes.append("‚Ä¢ Adicione letras mai√∫sculas (A-Z)")
if not tem_numero:
    sugestoes.append("‚Ä¢ Adicione n√∫meros (0-9)")
if not tem_simbolo:
    sugestoes.append("‚Ä¢ Adicione s√≠mbolos (!@#$%&*)")

if sugestoes:
    for sugestao in sugestoes:
        print(sugestao)
else:
    print("‚úÖ Sua senha atende todos os crit√©rios!")

# An√°lises adicionais
print(f"\n=== AN√ÅLISES EXTRAS ===")

if len(senha) >= 12:
    print("üõ°Ô∏è Comprimento excelente (12+ caracteres)")
elif len(senha) >= 10:
    print("üëç Bom comprimento (10+ caracteres)")

# Verifica√ß√£o de padr√µes comuns perigosos
padroes_perigosos = ["123", "abc", "password", "admin", "qwerty"]
senha_lower = senha.lower()

for padrao in padroes_perigosos:
    if padrao in senha_lower:
        print(f"‚ö†Ô∏è ATEN√á√ÉO: Cont√©m padr√£o comum '{padrao}'")
        break

# Verifica√ß√£o de repeti√ß√£o
if len(set(senha)) < len(senha) * 0.5:  # Muitos caracteres repetidos
    print("‚ö†Ô∏è ATEN√á√ÉO: Muitos caracteres repetidos")

# Dica final baseada na for√ßa
if forca in ["MUITO FRACA", "FRACA"]:
    print(f"\nüí° DICA: Crie uma frase e use iniciais + n√∫meros + s√≠mbolos")
    print("Exemplo: 'Eu Amo Python 2024!' ‚Üí 'EaP2024!'")

print("\nüí° EXPLICA√á√ÉO:")
print("- any() verifica se pelo menos um caractere atende crit√©rio")
print("- sum() conta quantos crit√©rios booleanos s√£o True")  
print("- if/elif em sequ√™ncia para classificar for√ßa")
print("- Loops para verificar padr√µes perigosos")
print("- set() para analisar diversidade de caracteres")
print()

print("-" * 60)

# ======================================
# DESAFIO EXTRA üöÄ
# ======================================
print("DESAFIO EXTRA üöÄ")
print("=" * 20)

# Solu√ß√£o:
print("=== QUIZ INTELIGENTE ===")
print("Responda √†s perguntas e veja como elas se conectam!\n")

# Pergunta 1: N√≠vel b√°sico
print("PERGUNTA 1: Qual linguagem voc√™ est√° aprendendo?")
print("a) Python  b) Java  c) C++  d) JavaScript")
resposta1 = input("Sua resposta: ").lower().strip()

if resposta1 == "a" or "python" in resposta1:
    print("üêç Excelente escolha! Python √© vers√°til e poderoso!\n")
    acertou_primeira = True
    
    # Pergunta 2: Baseada no acerto da primeira
    print("PERGUNTA 2: Qual estrutura de dados Python √© ordenada e mut√°vel?")
    print("a) tuple  b) list  c) set  d) dict")
    resposta2 = input("Sua resposta: ").lower().strip()
    
    if resposta2 == "b" or "list" in resposta2:
        print("üéØ Perfeito! Listas s√£o fundamentais em Python!\n")
        
        # Pergunta 3: N√≠vel avan√ßado (s√≥ para quem acertou as 2)
        print("PERGUNTA 3: Qual m√©todo adiciona um item ao FINAL de uma lista?")
        print("a) add()  b) insert()  c) append()  d) extend()")
        resposta3 = input("Sua resposta: ").lower().strip()
        
        if resposta3 == "c" or "append" in resposta3:
            print("üèÜ IMPRESSIONANTE! Voc√™ domina Python!")
            resultado_final = "EXPERT"
        else:
            print("üìö Quase l√°! append() adiciona ao final da lista.")
            resultado_final = "INTERMEDI√ÅRIO"
    else:
        print("üìñ N√£o exatamente. List √© ordenada E mut√°vel.\n")
        
        # Pergunta 3: N√≠vel b√°sico (para quem errou a segunda)
        print("PERGUNTA 3: Como voc√™ exibe texto na tela em Python?")
        print("a) echo  b) print  c) show  d) display")
        resposta3 = input("Sua resposta: ").lower().strip()
        
        if resposta3 == "b" or "print" in resposta3:
            print("‚úÖ Correto! print() √© fundamental em Python!")
            resultado_final = "INICIANTE"
        else:
            print("üí° √â print()! Esta √© a base de tudo em Python.")
            resultado_final = "PRECISA ESTUDAR"

else:
    print("ü§î Interessante! Mas hoje estamos focando em Python.\n")
    acertou_primeira = False
    
    # Pergunta 2: Motivacional para outras linguagens
    print("PERGUNTA 2: Por que Python √© uma boa linguagem para aprender?")
    print("a) √â muito r√°pida  b) Sintaxe simples  c) S√≥ para web  d) √â dif√≠cil")
    resposta2 = input("Sua resposta: ").lower().strip()
    
    if resposta2 == "b" or "simples" in resposta2:
        print("üëç Exato! Python prioriza legibilidade e simplicidade!\n")
        
        # Pergunta 3: Incentivo a experimentar Python
        print("PERGUNTA 3: Qual √© o resultado de print('Hello, World!') ?")
        print("a) Erro  b) Nada  c) Hello, World!  d) N√£o sei")
        resposta3 = input("Sua resposta: ").lower().strip()
        
        if resposta3 == "c" or "hello" in resposta3:
            print("üéâ Perfeito! Voc√™ entende o b√°sico de Python!")
            resultado_final = "CURIOSO"
        else:
            print("üíª Experimente! print() exibe texto na tela.")
            resultado_final = "EXPLORADOR"
    else:
        print("üí° Python √© famoso pela sintaxe simples e leg√≠vel!\n")
        resultado_final = "APRENDIZ"

# Resultado personalizado baseado no caminho
print("\n" + "="*50)
print("üéØ RESULTADO DO QUIZ INTELIGENTE")
print("="*50)

if acertou_primeira:
    if resultado_final == "EXPERT":
        print("üèÜ N√çVEL: EXPERT EM PYTHON")
        print("üéì Voc√™ domina conceitos avan√ßados!")
        print("üíº Recomenda√ß√£o: Projetos complexos, frameworks")
        print("üìö Pr√≥ximos passos: Machine Learning, Web Development")
    elif resultado_final == "INTERMEDI√ÅRIO":
        print("üìà N√çVEL: INTERMEDI√ÅRIO EM PYTHON") 
        print("üí™ Voc√™ conhece os fundamentos!")
        print("üíº Recomenda√ß√£o: Projetos pr√°ticos, bibliotecas")
        print("üìö Pr√≥ximos passos: Estruturas de dados avan√ßadas")
    else:  # INICIANTE
        print("üå± N√çVEL: INICIANTE EM PYTHON")
        print("‚ú® Voc√™ est√° no caminho certo!")
        print("üíº Recomenda√ß√£o: Pratique sintaxe b√°sica")
        print("üìö Pr√≥ximos passos: Loops, fun√ß√µes, listas")
else:
    if resultado_final == "CURIOSO":
        print("üîç N√çVEL: CURIOSO SOBRE PYTHON")
        print("üåü Voc√™ tem potencial!")
        print("üíº Recomenda√ß√£o: Experimente Python na pr√°tica")
        print("üìö Pr√≥ximos passos: Tutorial b√°sico, exerc√≠cios simples")
    else:
        print("üå± N√çVEL: DESCOBRINDO PROGRAMA√á√ÉO")
        print("üéØ Todo expert j√° foi iniciante!")
        print("üíº Recomenda√ß√£o: Comece com conceitos b√°sicos")
        print("üìö Pr√≥ximos passos: L√≥gica de programa√ß√£o, Python b√°sico")

print(f"\nüéÆ Voc√™ seguiu o caminho: ", end="")
if acertou_primeira:
    print("Python ‚Üí Listas ‚Üí ", end="")
    if resultado_final == "EXPERT":
        print("M√©todos avan√ßados")
    else:
        print("Conceitos b√°sicos")
else:
    print("Outras linguagens ‚Üí Motiva√ß√£o Python ‚Üí Experimenta√ß√£o")

print("\nüí° COMO O QUIZ FUNCIONOU:")
print("- Primeira pergunta determinou o 'n√≠vel' das pr√≥ximas")
print("- Condi√ß√µes aninhadas criaram caminhos diferentes")
print("- Cada resposta influenciou as perguntas seguintes")
print("- Resultado personalizado baseado no percurso completo")

print("\nüöÄ Isso √© o poder das estruturas condicionais!")
print("Com if/elif/else voc√™ pode criar experi√™ncias interativas!")

print("\n" + "="*70)

# ======================================
# RESUMO FINAL DO GABARITO
# ======================================
print("\nüéØ CONCEITOS DOMINADOS NESTE ENCONTRO:")

print("\nüå≥ ESTRUTURAS CONDICIONAIS:")
print("‚úÖ if: executa bloco SE condi√ß√£o for True")
print("‚úÖ elif: 'sen√£o se' - condi√ß√µes mutuamente exclusivas")
print("‚úÖ else: alternativa padr√£o se nenhuma condi√ß√£o for True")

print("\nüìê INDENTA√á√ÉO E BLOCOS:")
print("‚úÖ 4 espa√ßos (ou 1 tab) definem hierarquia")
print("‚úÖ Blocos agrupam linhas de c√≥digo relacionadas")
print("‚úÖ Indenta√ß√£o √© OBRIGAT√ìRIA em Python")

print("\nüîó CONDI√á√ïES COMPOSTAS:")
print("‚úÖ and: TODAS as condi√ß√µes devem ser True")
print("‚úÖ or: PELO MENOS UMA condi√ß√£o deve ser True")
print("‚úÖ not: inverte o resultado booleano")

print("\nüõ°Ô∏è VALIDA√á√ÉO E BOAS PR√ÅTICAS:")
print("‚úÖ Validar entrada do usu√°rio")
print("‚úÖ Tratar casos de erro")
print("‚úÖ Dar feedback espec√≠fico")
print("‚úÖ Usar condi√ß√µes aninhadas para l√≥gica complexa")

print("\n‚ö° PADR√ïES IMPORTANTES:")
print("- Ordem do elif: mais espec√≠fico primeiro")
print("- else opcional: s√≥ quando necess√°rio")
print("- Condi√ß√µes mutuamente exclusivas com elif")
print("- Aninhamento para decis√µes em camadas")

print("\nüöÄ PR√ìXIMO PASSO:")
print("Encontro 5: La√ßos de repeti√ß√£o!")
print("Vamos usar essas condicionais dentro de loops!")

print("\n=== FIM DO GABARITO ===")