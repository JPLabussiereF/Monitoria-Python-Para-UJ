# TAREFA DE CASA - ENCONTRO 3
# "Calculadora Cient√≠fica com Valida√ß√£o"

"""
ENUNCIADO:
Crie uma calculadora cient√≠fica completa que:

1. MENU DE OPERA√á√ïES:
   - Mostre todas as op√ß√µes: +, -, *, /, //, %, **
   - Pe√ßa dois n√∫meros e a opera√ß√£o desejada

2. VALIDA√á√ïES COM OPERADORES:
   - N√∫meros devem ser v√°lidos (n√£o vazios)
   - N√£o permitir divis√£o por zero (/ e //)
   - Opera√ß√£o deve estar no menu

3. C√ÅLCULOS COM TODOS OS OPERADORES:
   - Execute a opera√ß√£o escolhida
   - Mostre resultado formatado
   - Para divis√£o, mostre real E inteira

4. AN√ÅLISES COM OPERADORES L√ìGICOS:
   - Determine se resultado √© par/√≠mpar
   - Classifique como positivo/negativo/zero
   - Determine tamanho: pequeno (<100), m√©dio (100-1000), grande (>1000)

5. TABELA-VERDADE B√îNUS:
   - Compare se ambos os n√∫meros s√£o positivos
   - Use AND, OR, NOT para an√°lises extras

Tempo estimado: 15-20 minutos

EXEMPLO DE EXECU√á√ÉO:
=== CALCULADORA CIENT√çFICA ===
Opera√ß√µes dispon√≠veis: +, -, *, /, //, %, **

Primeiro n√∫mero: 15
Segundo n√∫mero: 4
Opera√ß√£o: **

=== C√ÅLCULO ===
15 ** 4 = 50625

=== AN√ÅLISE DO RESULTADO ===
√â par: False
√â positivo: True
Classifica√ß√£o: grande (> 1000)

=== AN√ÅLISE DOS N√öMEROS ===
Ambos positivos: True and True = True
Pelo menos um positivo: True or True = True
Nenhum negativo: not False = True
"""

# ==========================================
# ESCREVA SEU C√ìDIGO AQUI:
# ==========================================

print("=== CALCULADORA CIENT√çFICA COM VALIDA√á√ÉO ===")

# 1. Menu e coleta de dados


# 2. Valida√ß√µes usando operadores


# 3. C√°lculos com operadores aritm√©ticos


# 4. An√°lises com operadores de compara√ß√£o e l√≥gicos


# 5. Tabela-verdade b√¥nus


# ==========================================
# GABARITO (n√£o olhe antes de tentar!)
# ==========================================

"""
# GABARITO DA TAREFA DE CASA - ENCONTRO 3

print("=== CALCULADORA CIENT√çFICA COM VALIDA√á√ÉO ===")

# 1. Menu e coleta de dados
print("Opera√ß√µes dispon√≠veis: +, -, *, /, //, %, **")
print()

try:
    num1 = float(input("Primeiro n√∫mero: "))
    num2 = float(input("Segundo n√∫mero: "))
    operacao = input("Opera√ß√£o: ").strip()
    
    # 2. Valida√ß√µes usando operadores
    operacoes_validas = ['+', '-', '*', '/', '//', '%', '**']
    operacao_valida = operacao in operacoes_validas
    divisao_por_zero = (operacao == '/' or operacao == '//' or operacao == '%') and num2 == 0
    
    print(f"\n=== VALIDA√á√ïES ===")
    print(f"Opera√ß√£o v√°lida: {operacao_valida}")
    print(f"Divis√£o por zero: {divisao_por_zero}")
    
    # Valida√ß√£o combinada com operadores l√≥gicos
    pode_calcular = operacao_valida and not divisao_por_zero
    print(f"Pode calcular: {pode_calcular}")
    
    if pode_calcular:
        # 3. C√°lculos com operadores aritm√©ticos
        print(f"\n=== C√ÅLCULO ===")
        
        if operacao == '+':
            resultado = num1 + num2
        elif operacao == '-':
            resultado = num1 - num2
        elif operacao == '*':
            resultado = num1 * num2
        elif operacao == '/':
            resultado = num1 / num2
        elif operacao == '//':
            resultado = num1 // num2
        elif operacao == '%':
            resultado = num1 % num2
        elif operacao == '**':
            resultado = num1 ** num2
        
        print(f"{num1} {operacao} {num2} = {resultado}")
        
        # Para opera√ß√µes de divis√£o, mostrar diferentes tipos
        if operacao == '/':
            print(f"Divis√£o inteira: {num1} // {num2} = {num1 // num2}")
            print(f"Resto: {num1} % {num2} = {num1 % num2}")
        
        # 4. An√°lises com operadores de compara√ß√£o e l√≥gicos
        print(f"\n=== AN√ÅLISE DO RESULTADO ===")
        
        # Convertendo para int se for n√∫mero inteiro para an√°lise de par/√≠mpar
        if resultado == int(resultado):
            resultado_int = int(resultado)
            eh_par = resultado_int % 2 == 0
            print(f"√â par: {eh_par}")
        else:
            print("√â par: N/A (n√∫mero decimal)")
        
        # An√°lises com operadores de compara√ß√£o
        eh_positivo = resultado > 0
        eh_negativo = resultado < 0
        eh_zero = resultado == 0
        
        print(f"√â positivo: {eh_positivo}")
        print(f"√â negativo: {eh_negativo}")
        print(f"√â zero: {eh_zero}")
        
        # Classifica√ß√£o de tamanho usando operadores l√≥gicos
        eh_pequeno = abs(resultado) < 100
        eh_medio = 100 <= abs(resultado) <= 1000
        eh_grande = abs(resultado) > 1000
        
        if eh_pequeno:
            classificacao = "pequeno (< 100)"
        elif eh_medio:
            classificacao = "m√©dio (100-1000)"
        else:
            classificacao = "grande (> 1000)"
        
        print(f"Classifica√ß√£o: {classificacao}")
        
        # 5. Tabela-verdade e an√°lises com operadores l√≥gicos
        print(f"\n=== AN√ÅLISE DOS N√öMEROS ===")
        
        num1_positivo = num1 > 0
        num2_positivo = num2 > 0
        num1_negativo = num1 < 0
        num2_negativo = num2 < 0
        
        print(f"Primeiro n√∫mero positivo: {num1_positivo}")
        print(f"Segundo n√∫mero positivo: {num2_positivo}")
        
        # Opera√ß√µes l√≥gicas
        ambos_positivos = num1_positivo and num2_positivo
        pelo_menos_um_positivo = num1_positivo or num2_positivo
        nenhum_negativo = not (num1_negativo or num2_negativo)
        ambos_diferentes_de_zero = num1 != 0 and num2 != 0
        
        print(f"\n=== TABELA-VERDADE ===")
        print(f"Ambos positivos: {num1_positivo} and {num2_positivo} = {ambos_positivos}")
        print(f"Pelo menos um positivo: {num1_positivo} or {num2_positivo} = {pelo_menos_um_positivo}")
        print(f"Nenhum negativo: not ({num1_negativo} or {num2_negativo}) = {nenhum_negativo}")
        print(f"Ambos ‚â† 0: {num1 != 0} and {num2 != 0} = {ambos_diferentes_de_zero}")
        
        # An√°lise final combinada
        print(f"\n=== AN√ÅLISE COMBINADA ===")
        calculo_seguro = ambos_diferentes_de_zero and operacao_valida
        resultado_interessante = abs(resultado) > 10 and resultado != int(resultado)
        
        print(f"C√°lculo seguro: {calculo_seguro}")
        print(f"Resultado interessante: {resultado_interessante}")
        
    else:
        # Mensagens de erro usando operadores
        print(f"\n‚ùå ERRO NO C√ÅLCULO:")
        if not operacao_valida:
            print(f"- Opera√ß√£o '{operacao}' inv√°lida. Use: {', '.join(operacoes_validas)}")
        if divisao_por_zero:
            print("- N√£o √© poss√≠vel dividir por zero!")

except ValueError:
    print("‚ùå ERRO: Digite apenas n√∫meros v√°lidos!")

print(f"\nüéâ CALCULADORA CONCLU√çDA!")
print("Voc√™ dominou todos os operadores:")
print("‚úÖ Aritm√©ticos: +, -, *, /, //, %, **")  
print("‚úÖ Compara√ß√£o: ==, !=, <, >, <=, >=")
print("‚úÖ L√≥gicos: and, or, not")

# OBSERVA√á√ïES DO GABARITO:
# 1. Usamos try/except para validar entrada de n√∫meros
# 2. Operadores l√≥gicos combinam m√∫ltiplas condi√ß√µes
# 3. abs() pega valor absoluto para classifica√ß√£o
# 4. Convertemos float para int quando necess√°rio
# 5. Operadores in verifica se valor est√° em lista
# 6. strip() remove espa√ßos extras da opera√ß√£o
# 7. Combinamos todos os tipos de operadores
# 8. Valida√ß√µes robustas usando operadores l√≥gicos

# VARIA√á√ïES POSS√çVEIS:
# - Adicionar mais opera√ß√µes (raiz quadrada, log)
# - Hist√≥rico de c√°lculos  
# - Interface mais bonita com loops
# - Valida√ß√£o mais rigorosa de entrada
# - Opera√ß√µes com mais de 2 n√∫meros
"""

print("\nüí° DICAS PARA DESENVOLVER:")
print("- Teste todos os operadores aritm√©ticos")
print("- Valide divis√£o por zero usando compara√ß√£o")
print("- Use operadores l√≥gicos para combinar condi√ß√µes")
print("- Construa pelo menos uma tabela-verdade")
print("- Organize a sa√≠da de forma leg√≠vel")

print("\nüöÄ DESAFIOS EXTRAS:")
print("1. Adicione valida√ß√£o para opera√ß√µes inv√°lidas")
print("2. Mostre resultado em nota√ß√£o cient√≠fica se muito grande")
print("3. Calcule raiz quadrada usando ** 0.5")
print("4. Crie menu interativo com while (pr√≥ximo encontro!)")
print("5. Adicione hist√≥rico dos √∫ltimos 3 c√°lculos")

print("\n‚ö° CRIT√âRIOS DE AVALIA√á√ÉO:")
print("‚úÖ Usa todos os 7 operadores aritm√©ticos")
print("‚úÖ Aplica operadores de compara√ß√£o para valida√ß√µes") 
print("‚úÖ Combina condi√ß√µes com operadores l√≥gicos")
print("‚úÖ Constr√≥i pelo menos uma an√°lise boolean")
print("‚úÖ Trata caso de divis√£o por zero")
print("‚úÖ Organiza sa√≠da de forma profissional")