# GABARITO - ENCONTRO 2: Sintaxe, tipos e vari√°veis
# Monitoria de Python - Engenharia da Computa√ß√£o

"""
GABARITO COMPLETO
Solu√ß√µes comentadas com foco em tipos e convers√µes
"""

print("=== GABARITO - ENCONTRO 2 ===")
print()

# ======================================
# EXERC√çCIO 1 - CONVERSOR DE IDADE
# ======================================
print("1. CONVERSOR DE IDADE")
print("=" * 30)

# Solu√ß√£o:
ano_atual_str = input("Digite o ano atual: ")
ano_nasc_str = input("Digite seu ano de nascimento: ")

# Convertendo strings para inteiros
ano_atual = int(ano_atual_str)
ano_nascimento = int(ano_nasc_str)

# Calculando idade
idade = ano_atual - ano_nascimento

print("Sua idade √©:", idade, "anos")

print("\nüí° EXPLICA√á√ÉO:")
print("- input() sempre retorna string")
print("- int() converte string para n√∫mero inteiro")
print("- Agora podemos fazer subtra√ß√£o matem√°tica")
print("- Se n√£o convertesse, faria concatena√ß√£o: '2025' + '2003' = '20252003'")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 2 - CALCULADORA SIMPLES  
# ======================================
print("2. CALCULADORA SIMPLES")
print("=" * 30)

# Solu√ß√£o:
print("=== COLETANDO N√öMEROS ===")
num1_str = input("Digite o primeiro n√∫mero: ")
num2_str = input("Digite o segundo n√∫mero: ")

print("\nTipos ANTES da convers√£o:")
print("N√∫mero 1:", num1_str, "- Tipo:", type(num1_str))
print("N√∫mero 2:", num2_str, "- Tipo:", type(num2_str))

# Convertendo para float (aceita decimais)
num1 = float(num1_str)
num2 = float(num2_str)

print("\nTipos DEPOIS da convers√£o:")
print("N√∫mero 1:", num1, "- Tipo:", type(num1))
print("N√∫mero 2:", num2, "- Tipo:", type(num2))

# Calculando soma
soma = num1 + num2
print("\nSoma:", soma)

print("\nüí° EXPLICA√á√ÉO:")
print("- Usamos float() para aceitar n√∫meros decimais")
print("- int() s√≥ funcionaria com n√∫meros inteiros")
print("- Agora + faz soma matem√°tica, n√£o concatena√ß√£o")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 3 - FORMATADOR DE DADOS
# ======================================
print("3. FORMATADOR DE DADOS")
print("=" * 30)

# Solu√ß√£o:
print("=== COLETANDO INFORMA√á√ïES ===")
nome = input("Nome: ")
idade_str = input("Idade: ")
altura_str = input("Altura (ex: 1.75): ")
estudante_str = input("√â estudante? (sim/n√£o): ")

# Convers√µes apropriadas
idade = int(idade_str)           # Idade √© n√∫mero inteiro
altura = float(altura_str)       # Altura aceita decimais
estudante = estudante_str.lower() == "sim"  # Converte para boolean

print("\n=== DADOS FORMATADOS ===")
print("Nome:", nome, "- Tipo:", type(nome))
print("Idade:", idade, "anos - Tipo:", type(idade))
print("Altura:", altura, "m - Tipo:", type(altura))
print("√â estudante:", estudante, "- Tipo:", type(estudante))

print("\nüí° EXPLICA√á√ÉO:")
print("- nome: permanece string (texto)")
print("- idade: int (n√∫meros inteiros para idade)")
print("- altura: float (aceita 1.75, 1.8, etc)")
print("- estudante: boolean criado comparando com 'sim'")
print("- .lower() deixa tudo min√∫sculo para comparar")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 4 - CONVERSOR DE TEMPERATURA
# ======================================
print("4. CONVERSOR DE TEMPERATURA")
print("=" * 30)

# Solu√ß√£o:
celsius_str = input("Temperatura em Celsius: ")
celsius = float(celsius_str)

# Aplicando f√≥rmula: F = C √ó 9/5 + 32
fahrenheit = celsius * 9/5 + 32

print(f"Convers√£o: {celsius}¬∞C = {fahrenheit}¬∞F")

# Alternativa sem f-string:
print("Convers√£o:", celsius, "¬∞C =", fahrenheit, "¬∞F")

print("\nüí° EXPLICA√á√ÉO:")
print("- Usamos float() para aceitar decimais (25.5¬∞C)")
print("- F√≥rmula matem√°tica: multiplica√ß√£o e soma")
print("- f-string facilita formata√ß√£o (veremos mais no futuro)")
print("- Resultado em float preserva precis√£o")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 5 - ANALISADOR DE TEXTO vs N√öMERO
# ======================================
print("5. ANALISADOR DE TEXTO vs N√öMERO")
print("=" * 30)

# Solu√ß√£o:
valor_str = input("Digite um valor qualquer: ")

print("\n=== AN√ÅLISE DO VALOR ===")
print("Como string:", valor_str, "- Tipo:", type(valor_str))

# Tentando converter para int
print("\n--- Tentando converter para int ---")
if valor_str.isdigit() or (valor_str.startswith('-') and valor_str[1:].isdigit()):
    valor_int = int(valor_str)
    print("Como int:", valor_int, "- Tipo:", type(valor_int))
    print("‚úÖ Convers√£o para int: SUCESSO")
else:
    print("‚ùå Convers√£o para int: IMPOSS√çVEL (n√£o √© n√∫mero inteiro)")

# Tentando converter para float  
print("\n--- Tentando converter para float ---")
try:
    valor_float = float(valor_str)
    print("Como float:", valor_float, "- Tipo:", type(valor_float))
    print("‚úÖ Convers√£o para float: SUCESSO")
except ValueError:
    print("‚ùå Convers√£o para float: IMPOSS√çVEL (n√£o √© n√∫mero)")

# Boolean
valor_bool = bool(valor_str)
print("\n--- Convertendo para bool ---")
print("Como bool:", valor_bool, "- Tipo:", type(valor_bool))
print("(Lembre: s√≥ strings vazias '' s√£o False)")

print("\nüí° EXPLICA√á√ÉO:")
print("- isdigit() verifica se cont√©m s√≥ n√∫meros")
print("- try/except captura erros de convers√£o")
print("- float() √© mais flex√≠vel que int()")
print("- bool() s√≥ √© False para valores 'vazios'")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 6 - CALCULADORA DE M√âDIA
# ======================================
print("6. CALCULADORA DE M√âDIA")
print("=" * 30)

# Solu√ß√£o:
print("=== CALCULADORA DE NOTAS ===")
nota1_str = input("Primeira nota: ")
nota2_str = input("Segunda nota: ")
nota3_str = input("Terceira nota: ")

# Convertendo todas para float
nota1 = float(nota1_str)
nota2 = float(nota2_str)
nota3 = float(nota3_str)

# Calculando m√©dia
media = (nota1 + nota2 + nota3) / 3

# Determinando aprova√ß√£o (boolean)
aprovado = media >= 7.0

# Exibindo resultados formatados
print("\n=== RESULTADO ===")
print("Notas:", nota1, ",", nota2, ",", nota3)
print("M√©dia:", round(media, 2))  # Arredondando para 2 casas
print("Aprovado:", aprovado, "- Tipo:", type(aprovado))

# Mensagem condicional simples
if aprovado:
    print("üéâ Parab√©ns! Voc√™ foi aprovado!")
else:
    print("üìö Continue estudando para a pr√≥xima!")

print("\nüí° EXPLICA√á√ÉO:")
print("- float() para aceitar notas decimais (7.5, 8.2, etc)")
print("- Compara√ß√£o (>=) retorna boolean automaticamente")
print("- round(media, 2) arredonda para 2 casas decimais")
print("- Boolean pode ser usado em condi√ß√µes (if)")
print()

print("-" * 50)

# ======================================
# EXERC√çCIO 7 - CONSTRUTOR DE FRASE
# ======================================
print("7. CONSTRUTOR DE FRASE")
print("=" * 30)

# Solu√ß√£o:
print("=== COLETANDO INFORMA√á√ïES ===")
nome = input("Nome: ")
idade_str = input("Idade: ")
cidade = input("Cidade: ")
salario_str = input("Sal√°rio desejado: ")

# Convers√µes apropriadas
idade = int(idade_str)
salario = float(salario_str)

print("\n=== CONSTRUINDO FRASES ===")

# M√©todo 1: Concatena√ß√£o com +
frase1 = "Ol√°, meu nome √© " + nome + ", tenho " + str(idade) + " anos, moro em " + cidade + " e quero ganhar R$ " + str(salario) + "."
print("Com concatena√ß√£o (+):")
print(frase1)

# M√©todo 2: V√≠rgulas no print
print("\nCom v√≠rgulas:")
print("Ol√°, meu nome √©", nome, ", tenho", idade, "anos, moro em", cidade, "e quero ganhar R$", salario, ".")

# M√©todo 3: f-string (b√¥nus)
print("\nCom f-string (avan√ßado):")
print(f"Ol√°, meu nome √© {nome}, tenho {idade} anos, moro em {cidade} e quero ganhar R$ {salario}.")

print("\n=== COMPARA√á√ÉO DOS M√âTODOS ===")
print("Concatena√ß√£o (+): Precisa converter tudo para string")
print("V√≠rgulas: Python faz convers√£o autom√°tica")  
print("F-string: Mais limpo e moderno")

print("\nüí° EXPLICA√á√ÉO:")
print("- Concatena√ß√£o (+) s√≥ funciona entre strings")
print("- str() converte n√∫meros para texto")
print("- V√≠rgulas no print() s√£o mais pr√°ticas")
print("- f-strings s√£o o futuro do Python!")
print()

print("-" * 50)

# ======================================
# DESAFIO EXTRA üöÄ
# ======================================
print("DESAFIO EXTRA üöÄ")
print("=" * 30)

# Solu√ß√£o completa:
print("=== CART√ÉO DE DADOS PROFISSIONAL ===")

# Coletando informa√ß√µes variadas
nome = input("Nome completo: ")
idade_str = input("Idade: ")
altura_str = input("Altura (m): ")
peso_str = input("Peso (kg): ")
ativo_str = input("Est√° ativo no mercado? (sim/n√£o): ")

# Convers√µes para tipos apropriados
idade = int(idade_str)              # int: n√∫mero inteiro
altura = float(altura_str)          # float: aceita decimais
peso = float(peso_str)             # float: aceita decimais  
ativo = ativo_str.lower() == "sim" # bool: verdadeiro/falso

# C√°lculo b√¥nus: IMC
imc = peso / (altura * altura)

# Exibindo cart√£o profissional
print("\n" + "=" * 50)
print("           CART√ÉO DE DADOS")
print("=" * 50)
print(f"Nome: {nome}")
print(f"Idade: {idade} anos")
print(f"Altura: {altura} m")
print(f"Peso: {peso} kg")
print(f"IMC: {round(imc, 1)}")
print(f"Ativo no mercado: {ativo}")
print("=" * 50)

print("\n=== AN√ÅLISE DOS TIPOS ===")
# O .__name__ √© um atributo especial que retorna o nome do tipo/classe como string:
# print(type(nome))           # ‚Üí <class 'str'>
# print(type(nome).__name__)  # ‚Üí str
print("Nome:", nome, "‚Üí", type(nome).__name__)
print("Idade:", idade, "‚Üí", type(idade).__name__)
print("Altura:", altura, "‚Üí", type(altura).__name__)
print("Peso:", peso, "‚Üí", type(peso).__name__)
print("Ativo:", ativo, "‚Üí", type(ativo).__name__)

# A fun√ß√£o round() √© usada para arredondar n√∫meros ‚Üí round(numero, casas_decimais)
print("IMC:", round(imc, 1), "‚Üí", type(imc).__name__)

print("\nüéØ RESUMO DOS TIPOS USADOS:")
print("‚úÖ str: Nome (texto)")
print("‚úÖ int: Idade (n√∫mero inteiro)")  
print("‚úÖ float: Altura, peso, IMC (decimais)")
print("‚úÖ bool: Status ativo (True/False)")

print("\nüí° EXPLICA√á√ÉO AVAN√áADA:")
print("- type().__name__ mostra s√≥ o nome do tipo")
print("- Usamos todos os 4 tipos b√°sicos do Python")
print("- C√°lculos matem√°ticos s√≥ funcionam ap√≥s convers√£o")
print("- Formata√ß√£o profissional melhora apresenta√ß√£o")
print("- round() controla casas decimais do resultado")
print()

print("=" * 60)

# ======================================
# DICAS FINAIS DO GABARITO
# ======================================
print("\nüéØ DICAS IMPORTANTES PARA DOMINAR TIPOS:")
print("\n1. CONVERS√ïES B√ÅSICAS:")
print("   int('123') ‚Üí 123")
print("   float('12.5') ‚Üí 12.5") 
print("   str(123) ‚Üí '123'")
print("   bool('texto') ‚Üí True")

print("\n2. PEGADINHAS:")
print("   int(12.9) ‚Üí 12 (corta, n√£o arredonda!)")
print("   bool('0') ‚Üí True (string n√£o vazia)")
print("   bool('') ‚Üí False (string vazia)")
print("   float('12,5') ‚Üí ERRO (use ponto: '12.5')")

print("\n3. BOAS PR√ÅTICAS:")
print("   - Use int() para idades, anos, contadores")
print("   - Use float() para medidas, pre√ßos, c√°lculos")
print("   - Use str() quando precisar de texto")
print("   - Use bool() para flags verdadeiro/falso")

print("\n4. FORMATA√á√ÉO:")
print("   - round(numero, 2) para 2 casas decimais")
print("   - V√≠rgulas no print() s√£o mais f√°ceis que +")
print("   - f-strings s√£o o futuro: f'Ol√° {nome}!'")

print("\nüöÄ PR√ìXIMOS PASSOS:")
print("- Pratiquem convers√µes at√© virar autom√°tico")
print("- Testem valores que quebram (letras em int())")
print("- No Encontro 3: usaremos esses tipos com operadores!")

print("\n=== FIM DO GABARITO ===")